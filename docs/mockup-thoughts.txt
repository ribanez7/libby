Yaml parser in bash, based on ruby parser
=========================================

The parser has to have the following options:
..|--return-value <key>
..|--set-value    <key:value>
..|--fetch        <key:ifnone>   
..|--values-at    <key,key,key,...>
..|--delete       <key>
..|--delete-if    'boolean expression' 'boolean expression' '...'
..|--each-pair    'function previously defined with 2 parms'
..|--each-value   'function previously defined with 1 parm'
..|--each-key     'function previously defined with 1 parm'
..|--values       <name of a new array>
..|--has-value    <value> (true if found)
..|--invert       <name of new associative array[value]=key>
..|--replace      <name of new associative array[key]=value>
..|--shift        removes a key-value pair
..|--select       <key,key,key,...> array 'boolean' 'boolean '...'
..|--store        <key:value>
..|--update       <yaml file>
..|--return-key   <value>
..|--to-array     <arrayName -will be even=key,odd=value>
..|--to-hash      <yaml file>



  
yaml [options]

-v|--return-value <key>

  Return value associated with key from database.
  Returns nil if there is no such key.
  See fetch for more information.

    def []( key )
      fetch( key )
    end
          
-s|--set-value <key:value>

	Set key to value in database.
	value will be converted to YAML before storage.
  See store for more information.

    def []=( key, val )
      store( key, val )
    end

-f|--fetch
  Return value associated with key.
  If there is no value for key and no block is given, returns ifnone.
  Otherwise, calls block passing in the given key.
  See ::DBM#fetch for more information.
  
    def fetch( keystr, ifnone = nil )
        begin
            val = super( keystr )
            return YAML.load( val ) if String === val
        rescue IndexError
        end
        if block_given?
            yield keystr
        else
            ifnone
        end
    end

..|--key <value>
  Returns the key for the specified value.
  
    def key( keystr )
        invert[keystr]
    end


..|--values-at <key,key,key,...>
  Returns an array containing the values associated with the given keys.

    def values_at( *keys )
        keys.collect { |k| fetch( k ) }
    end

-d|--delete <key>
  Deletes value from database associated with key.
  Returns value or nil.

    def delete( key )
        v = super( key )
        if String === v
            v = YAML.load( v )
        end
        v
    end

-i|--delete-if 
  Calls the given block once for each key, value pair in the database.
  Deletes all entries for which the block returns true.
  Returns self.

    def delete_if # :yields: [key, value]
        del_keys = keys.dup
        del_keys.delete_if { |k| yield( k, fetch( k ) ) == false }
        del_keys.each { |k| delete( k ) }
        self
    end

..|--each-pair
  Calls the given block once for each key, value pair in the database.
  Returns self.

    def each_pair # :yields: [key, value]
        keys.each { |k| yield k, fetch( k ) }
        self
    end

..|--each-value
  Calls the given block for each value in database.
  Returns self.

    def each_value # :yields: value
        super { |v| yield YAML.load( v ) }
        self
    end

..|--each-key
  Calls the given block for each key in database.
  Returns self.

    def each_key # :yields: key
        super { |k| yield YAML.load( k ) }
        self
    end

..|--values
  Returns an array of values from the database.
    
    def values
        super.collect { |v| YAML.load( v ) }
    end

..|--has-value <value>
  Returns true if specified value is found in the database.

    def has_value?( val )
        each_value { |v| return true if v == val }
        return false
    end

..|--invert
  Returns a Hash (not a DBM database) created by using each value in the
  database as a key, with the corresponding key as its value.
  Note that all values in the hash will be Strings, but the keys will be
  actual objects.

    def invert
        h = {}
        keys.each { |k| h[ self.fetch( k ) ] = k }
        h
    end

..|--replace <hash>
  Replaces the contents of the database with the contents of the specified object.
  Takes any object which implements the #each_pair method, including Hash and DBM objects.

    def replace( hsh )
        clear
        update( hsh )
    end

..|--shift
  Removes a [key, value] pair from the database, and returns it.
  If the database is empty, returns nil.
  The order in which values are removed/returned is not guaranteed.

    def shift
        a = super
        a[1] = YAML.load( a[1] ) if a
        a
    end

..|--select <key,key,key,...>
  If a block is provided, returns a new array containing [key, value] pairs
  for which the block returns true.
  Otherwise, same as values_at
  
    def select( *keys )
        if block_given?
            self.keys.collect { |k| v = self[k]; [k, v] if yield k, v }.compact
        else
            values_at( *keys )
        end
    end

..|--store <key:value>
  Stores value in database with key as the index.
  value is converted to YAML before being stored.
  Returns value
  
    def store( key, val )
        super( key, val.to_yaml )
        val
    end


..|--update <hash>
  Updates the database with multiple values from the specified object.
  Takes any object which implements the #each_pair method, including Hash and DBM objects.
  Returns self.
    
    def update( hsh )
        hsh.each_pair do |k,v|
            self.store( k, v )
        end
        self
    end


..|--to-array
  Converts the contents of the database to an array of [key, value] arrays, and returns it.
  
    def to_a
        a = []
        keys.each { |k| a.push [ k, self.fetch( k ) ] }
        a
    end

    
..|--to-hash
  Converts the contents of the database to an in-memory Hash object, and returns it.
  
    def to_hash
        h = {}
        keys.each { |k| h[ k ] = self.fetch( k ) }
        h
    end
